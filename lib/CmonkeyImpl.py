#BEGIN_HEADER
#END_HEADER

'''

Module Name:
Cmonkey

Module Description:
Module KBaseCmonkey version 1.0
This module provides a set of methods for work with cMonkey biclustering tool.

Data types summary
Input data types: 
ExpressionDataSeries represents a list of expression data samples that serve as an input of cMonkey.
ExpressionDataSample data type represents a sample of expression data for a single condition.
ExpressionDataPoint data type represents a relative expression value for a single gene.
Output data types:
CmonkeyRun data type represents data generated by a single run of cMonkey (run_infos table of cMonkey results)
CmonkeyNetwork data type represents bicluster network
CmonkeyCluter data type represents a single bicluster from cMonkey network, with links to genes, experimental conditions and motifs
CmonkeyMotif data type represents a single motif identifed for a bicluster

Methods summary
build_cmonkey_network - Starts cMonkey server run for a series of expression data and returns job ID of the run 
build_cmonkey_network_from_ws - Starts cMonkey server run for a series of expression data stored in workspace and returns job ID of the run
build_cmonkey_network_job_from_ws - Starts cMonkey server run for a series of expression data stored in workspace and returns job ID of the run

'''
class Cmonkey:

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    def __init__(self, config): #config contains contents of config file in hash or 
                                #None if it couldn't be found
        #BEGIN_CONSTRUCTOR
        #END_CONSTRUCTOR
        pass

    def build_cmonkey_network(self, series, params):
        # self.ctx is set by the wsgi application class
        # return variables are: cmonkey_run_result
        #BEGIN build_cmonkey_network
        #END build_cmonkey_network

        #At some point might do deeper type checking...
        if not isinstance(cmonkey_run_result, dict):
            raise ValueError('Method build_cmonkey_network return value cmonkey_run_result is not type dict as required.')
        # return the results
        return [ cmonkey_run_result ]
        
    def build_cmonkey_network_from_ws(self, ws_id, collection_id, params):
        # self.ctx is set by the wsgi application class
        # return variables are: cmonkey_run_result_id
        #BEGIN build_cmonkey_network_from_ws
        #END build_cmonkey_network_from_ws

        #At some point might do deeper type checking...
        if not isinstance(cmonkey_run_result_id, basestring):
            raise ValueError('Method build_cmonkey_network_from_ws return value cmonkey_run_result_id is not type basestring as required.')
        # return the results
        return [ cmonkey_run_result_id ]
        
    def build_cmonkey_network_job_from_ws(self, ws_id, series_id, params):
        # self.ctx is set by the wsgi application class
        # return variables are: cmonkey_run_result_job_id
        #BEGIN build_cmonkey_network_job_from_ws
        #END build_cmonkey_network_job_from_ws

        #At some point might do deeper type checking...
        if not isinstance(cmonkey_run_result_job_id, basestring):
            raise ValueError('Method build_cmonkey_network_job_from_ws return value cmonkey_run_result_job_id is not type basestring as required.')
        # return the results
        return [ cmonkey_run_result_job_id ]
        
