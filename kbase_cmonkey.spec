/* 
	Module KBaseCmonkey version 1.0
	This module provides a set of methods for work with cMonkey biclustering tool.
	
	Data types summary
	Input data types: 
	ExpressionDataCollection represents a list of expression data sets that serve as an input of cMonkey.
	ExpressionDataSet data type represents a single expression data set.
	ExpressionDataPoint data type represents a relative expression value for a single gene.
	Output data types:
	CmonkeyRun data type represents data generated by a single run of cMonkey (run_infos table of cMonkey results)
	CmonkeyNetwork data type represents bicluster network
	CmonkeyCluter data type represents a single bicluster from cMonkey network, with links to genes, experimental conditions and motifs
	MemeMotif data type definition is described in kbase_meme.spec

	Methods summary
	buildCmonkeyNetwork - runs cMonkey for a collection of expression data sets and returns CmonkeyRun that describes run parameters and bicluster network
*/

module KbaseCmonkey
{

	/* Represents a particular data point from gene expression data set
		string geneId - KBase gene identifier
		float expressionValue - relative expression value 
	*/
	typedef structure{
		string geneId;
		float expressionValue;
	} ExpressionDataPoint;
	
	/* Represents set of expression data
		string expressionDataSetId - identifier of data set
		string expressionDataSetDescription - description of data set`
		list<ExpressionDataPoint> expressionDataPoints - data points
	*/
	typedef structure{
		string expressionDataSetId;
		string expressionDataSetDescription;
		list<ExpressionDataPoint> expressionDataPoints;
	} ExpressionDataSet;

	/* Represents collection of expression data sets
		string ExpressionDataCollectionId - identifier of the collection
		list<ExpressionDataSet> expressionDataSets - data sets
	*/
	typedef structure{
		string ExpressionDataCollectionId;
		list<ExpressionDataSet> expressionDataSets;
	} ExpressionDataCollection;

	/*	Represents a particular MAST hit
		string sequenceName - name of sequence
		string strand - strand ("+" or "-")
		string motifName - name of motif
		int hitStart - start position of hit
		int hitEnd - end position of hit
		float score - hit score
		float hitPvalue - hit p-value
	*/
	typedef structure{
		string sequenceName;
		string strand;
		string motifName;
		int hitStart;
		int hitEnd;
		float score;
		float hitPvalue;
	} HitMast;

	/*	Represents a particular row of PSSM
		int rowNumber - number of PSSM row
		float aWeight 
		float cWeight
		float gWeight
		float tWeight
	*/
	typedef structure{
		int rowNumber;
		float aWeight;
		float cWeight;
		float gWeight;
		float tWeight;
	} PssmRow;

	/* Represents motif generated by cMonkey with a list of hits in upstream sequences
		string CmonkeyMotifId - identifier of MotifCmonkey
		string seqType - type of sequence
		int motifNumber - number of motif
		float evalue - motif e-value
		list<PssmRow> pssm - PSSM 
		list<HitMast> hits - hits (motif annotations)
	*/
	typedef structure{
		string CmonkeyMotifId;
		string seqType;
		int motifNumber;
		float evalue;
		list<PssmRow> pssm;
		list<HitMast> hits;
	} MotifCmonkey;

	/* Represents bicluster generated by cMonkey
		string CmonkeyClusterId - identifier of bicluster
		int numGenes - number of genes
		int numConditions - number of conditions
		float clusterResidual - residual
		list<string> clusterExpressionDataSetIds - list of experimental conditions 
		list<string> clusterGeneIds - list of genes from bicluster
		list<MotifCmonkey> clusterMotifs - list of motifs identified for the bicluster, converted to MEME format
	*/
	typedef structure{
		string CmonkeyClusterId;
		int numGenes;
		int numConditions;
		float clusterResidual;
		list<string> clusterExpressionDataSetIds;
		list<string> clusterGeneIds;
		list<MotifCmonkey> clusterMotifs;
	} CmonkeyCluster;
	
	/* Represents network generated by a single run of cMonkey
		string CmonkeyNetworkId - identifier of cMonkey-generated network
		int Iteration - number of the last iteration
		list<CmonkeyCluster> cmonkeyClusters - list of biclusters
	*/
	typedef structure{
		string CmonkeyNetworkId;
		int Iteration;
		list<CmonkeyCluster> cmonkeyClusters;
	} CmonkeyNetwork;
	
	/* Represents data from a single run of cMonkey
		string cmonkeyRunId - identifier or cMonkey run
		string cmonkeyRunStartTime - start time of cMonkey run
		string cmonkeyRunFinishTime - end time of cMonkey run
		int cmonkeyRunNumIterations - number of iterations
		int cmonkeyRunLastIteration - last iteration
		string cmonkeyRunOrganism - organism
		int cmonkeyRunNumRows - number of rows
		int cmonkeyRunNumColumns - number of columns
		int cmonkeyRunNumClusters - number of clusters
		CmonkeyNetwork cmonkeyNetwork;
	*/
	typedef structure{
		string cmonkeyRunId;
		string cmonkeyRunStartTime;
		string cmonkeyRunFinishTime;
		int cmonkeyRunNumIterations;
		int cmonkeyRunLastIteration;
		string cmonkeyRunOrganism;
		int cmonkeyRunNumRows;
		int cmonkeyRunNumColumns;
		int cmonkeyRunNumClusters;
		CmonkeyNetwork cmonkeyNetwork;
	} CmonkeyRun;
		
	/* Represents collection of genes
		string GeneCollectionId - identifier of the collection
		string GeneCollectionDescription - description of the collection
		list<string> geneIds - list of genes
	*/
	typedef structure{
		string GeneCollectionId;
		string GeneCollectionDescription;
		list<string> geneIds;
	} GeneCollection;
	
	/*	Returns a data about bicluster network built by cMonkey algorithm
		ExpressionDataCollection expressionDataCollection - collection of expression data sets for cMonkey run
		CmonkeyRun cmonkeyRun - result of cMonkey run
	*/
	funcdef buildCmonkeyNetwork(ExpressionDataCollection expressionDataCollection) returns(CmonkeyRun cmonkeyRun);
		
};